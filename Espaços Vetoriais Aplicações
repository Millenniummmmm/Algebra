{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Millenniummmmm/Algebra/blob/main/Espa%C3%A7os%20Vetoriais%20Aplica%C3%A7%C3%B5es\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h1><center></center><h1>\n",
        "\n",
        "<center><h1>Instruções para criar uma cópia da Lista no Google Colab</h1></center>\n",
        "\n",
        "---\n",
        "\n",
        "Para que cada um de vocês possa responder às perguntas individualmente no Google Colab, sigam os passos abaixo para gerar uma cópia do Colab:\n",
        "\n",
        "1. **No topo da página**, clique em `Arquivo` (ou `File`, caso esteja em inglês).\n",
        "2. No menu que aparecer, selecione a opção `Salvar uma cópia no Drive` (ou `Save a copy in Drive`). Isso criará uma cópia do Colab no seu Google Drive.\n",
        "3. **Uma nova aba** será aberta com sua própria versão do Colab. Agora você pode responder às perguntas diretamente nessa cópia.\n",
        "4. Ao finalizar, **não se esqueça de salvar** o progresso clicando em `Arquivo` e depois em `Salvar`.\n",
        "\n",
        "---\n",
        "\n",
        "<center><h2>Compartilhando o Colab</h2></center>\n",
        "\n",
        "1. Na aba superior direita, clique no botão `Compartilhar` (ou `Share`).\n",
        "2. Uma janela vai aparecer. Nela, clique em `Mudar para qualquer pessoa com o link` (ou `Anyone with the link`).\n",
        "3. No mesmo menu, certifique-se de que a opção de acesso esteja marcada como `Editor` (ou `Editor`), para que eu possa visualizar e corrigir suas respostas.\n",
        "4. Depois, clique em `Copiar link` (ou `Copy link`) para copiar o link de compartilhamento.\n",
        "5. Por fim, na atividade do sigaa, adicione o link e finalize o envio.\n",
        "\n",
        "---\n",
        "\n",
        "<center><h3>Nota: Nenhuma biblioteca deverá ser utilizada, além das bibliotecas já importadas.</h3></center>\n"
      ],
      "metadata": {
        "id": "aokGslKx8gjr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "## Alunos: Larissa Ferreira Dias de Souza e Otávio Joshua Costa Brandão Menezes"
      ],
      "metadata": {
        "id": "4TNXjNdkAXBp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<center><h1></h1></center>\n",
        "<center><h1>Questão 1</h1></center>\n",
        "\n",
        "---\n",
        "\n",
        "O conjunto das sequências finitas de números complexos $\\mathbb{C}^n$ forma um espaço vetorial sobre $\\mathbb{C}$ usando as operações padrão. A ideia desta questão é implementar testes com vetores específicos em um subconjunto, o das sequências de 3 elementos complexos, mas com operações diferentes.\n",
        "\n",
        "$$ V \\subset \\mathbb{C}^3 \\subset \\mathbb{C}^n ⇒ V = \\{(v_1, v_2, v_3) : v_i = a_i + b_i j \\space ; \\space a_i, b_i \\in \\mathbb{R} \\} $$\n",
        "\n",
        "Esses testes vão verificar se esses vetores obedecem os axiomas, caso seja verificado que um deles não funcionou, mesmo que apenas para um caso apenas, poderemos dizer que o conjunto com essas operações não é espaço vetorial.\n",
        "\n",
        "DICA: Se você não lembra as operações dos números complexos, recomendo dar uma olhada em [link](https://www.uel.br/projetos/matessencial/basico/medio/ncomplexos.html).\n",
        "\n",
        "---\n",
        "\n",
        "### <center>Soma Vetorial</center>\n",
        "\n",
        "Dados os vetores $\\mathrm{\\vec{v}} = \\{v_1, v_2, v_3\\}$ e $\\mathrm{\\vec{u}} = \\{u_1, u_2, u_3\\}$, onde $v_i, u_i \\in \\mathbb{C}$ e são do tipo $a$ $+$ $bj$ | $a, b \\in \\mathbb{R}$ e $j^2 = -1$\n",
        "\n",
        "A **soma** dos vetores é dada por:\n",
        "\n",
        "$$\\vec{u} \\oplus \\vec{v} = \\{u_1+v_1, u_2+v_2, u_3+v_3\\}$$\n",
        "\n",
        "Ex.: $$\\{1 + 2j, 0, 4j\\} \\oplus \\{4j, -2, 6 \\} = \\{ 1+6j, -2, 6+4j \\}$$\n",
        "\n",
        "<br>\n",
        "\n",
        "---\n",
        "\n",
        "### <center>Produto Vetorial por escalar</center>\n",
        "\n",
        "Dado o vetor $\\mathrm{\\vec{u}} = \\{u_1, u_2, u_3\\}$, o produto por escalar complexo $\\beta \\in \\mathbb{C}$ pode ser definido como:\n",
        "\n",
        "\n",
        "$$\\beta \\odot \\vec{u} = \\{|\\beta|*u_1, |\\beta|*u_2, |\\beta|*u_3\\}$$\n",
        "\n",
        "Lembre-se que, como $\\beta = \\beta_{real} + \\beta_{imag}j \\in \\mathbb{C}$,\n",
        "$$|\\beta| = \\sqrt{\\beta_{real}^2 + \\beta_{imag}^2}$$\n",
        "\n",
        "Ex.: $$(4+3j) \\odot \\{1 + 2j, 0, 2j\\} = \\{ 5 + 10j, 0, 10j \\}$$\n",
        "\n",
        "\n",
        "\n",
        "<br>\n",
        "\n",
        "---\n",
        "\n",
        "<br>\n",
        "O objetivo da Questão é verificar se o conjunto é um espaço vetorial sobre $\\mathbb{C}$ através de inspeção de exemplos e checagem de situações de quebra de axioma.\n",
        "\n",
        "1. Implemente as funções de soma e produto\n",
        "2. Implemente as funções de verificação de fechamento\n",
        "3. Proponha um vetor nulo do espaço vetorial\n",
        "4. Proponha um vetor inverso\n",
        "5. Implemente as funções de checagem de axiomas de soma\n",
        "6. Implemente as funções de checagem de axiomas de produto"
      ],
      "metadata": {
        "id": "pxXt_IvTBDZG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "UnxcjMAPjkNc"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "zUiB4FBW1SbF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np # type: ignore # Importando a biblioteca de computação numérica\n",
        "\n",
        "# Definição de vetores\n",
        "v = []\n",
        "v.append(np.array([1, 1j, 1], dtype='complex128'))\n",
        "v.append(np.array([4, 3, 2], dtype='complex128'))\n",
        "v.append(np.array([2+3j, complex(np.sqrt(3), np.pi), 3], dtype='complex128'))\n",
        "v.append(np.array([complex(np.cos(np.pi/2), np.sin(np.pi/2)), 1, complex(np.exp(-2), 0)], dtype='complex128'))\n",
        "\n",
        "beta = []\n",
        "beta.append(3+4j)\n",
        "beta.append(np.exp(-np.pi/2) + 0j)\n",
        "beta.append(-12345+28413j)\n",
        "\n",
        "# Funções\n",
        "                                    #axioma 1\n",
        "def soma(u, v):\n",
        "    #Alterado:\n",
        "    w = u + v #soma de vetores\n",
        "    return w #retorna a soma\n",
        "\n",
        "def verifica_soma(u, v):\n",
        "    #fazer toda a lógica para ver se a soma dos vetores resultam em outro vetor do mesmo conjunto\n",
        "    w = soma(u, v)\n",
        "    if w.shape == (3,) and w.dtype == 'complex128': #ver se o vetor tem o mesmo tamanho (3) e o tipo dele\n",
        "        return True\n",
        "    return False\n",
        "\n",
        "print('Testando fechamento da soma:')\n",
        "for i in range(len(v)):\n",
        "  for k in range(len(v) - i - 1):\n",
        "    print(verifica_soma(v[i], v[k+i+1]) , ' => ', v[i], ' , ', v[k+i+1])\n",
        "\n",
        "                                    #axioma 6\n",
        "def produto(beta, u):\n",
        "    #alterado:\n",
        "    modulo_beta = np.abs(np.sqrt(np.real(beta)**2 + np.imag(beta)**2)) #definição da operação produto\n",
        "    w = modulo_beta * u #multiplicação de um vetor por um escalar complexo\n",
        "    return w #retorna a multiplicação\n",
        "\n",
        "def verifica_produto(beta, u):\n",
        "    #fazer toda a lógica para ver se o produto de um escalar e um vetor resultam em outro vetor do mesmo conjunto\n",
        "    w = produto(beta, u)\n",
        "    if w.shape == (3,) and w.dtype == 'complex128': #para verificar o tamanho do array e o tipo\n",
        "        return True\n",
        "    return False\n",
        "\n",
        "print('--------------------------------------')\n",
        "print('Testando fechamento do produto escalar:')\n",
        "for i in range(len(beta)):\n",
        "  for k in range(len(v)):\n",
        "    print(verifica_produto(beta[i], v[k]), ' => ', beta[i], ' , ', v[k])\n",
        "\n",
        "\n",
        "                                    #axioma 4\n",
        "# proponha o vetor nulo\n",
        "    #alterado:\n",
        "    nulo = np.zeros(3, dtype='complex128')\n",
        "\n",
        "def verifica_nulo(v):\n",
        "  # Já implementado, não se preocupar\n",
        "    return np.all(soma(v, nulo) == v) # retorna True se todos valores de v+nulo forem iguais a v e False caso contrário\n",
        "\n",
        "print('--------------------------------------')\n",
        "print('Testando vetor nulo:')\n",
        "for i in range(len(v)):\n",
        "  print(verifica_nulo(v[i]), ' => ', v[i])\n",
        "\n",
        "                                    #axioma 5\n",
        "# proponha o vetor inverso\n",
        "def inverso(v):\n",
        "    w = -v\n",
        "    return w\n",
        "\n",
        "def verifica_inverso(v):\n",
        "  # Já implementado, não se preocupar\n",
        "    return np.all(soma(v, inverso(v)) == nulo) # retorna True se todos valores de v+inverso(v) forem iguais a nulo e False caso contrário\n",
        "\n",
        "print('--------------------------------------')\n",
        "print('Testando vetor inverso:')\n",
        "for i in range(len(v)):\n",
        "  print(verifica_inverso(v[i]), ' => ', v[i])\n",
        "\n",
        "                                    #axioma 2\n",
        "def verifica_comutatividade(u, v):\n",
        "    soma1 = soma(u, v) #usa a função soma para u + v\n",
        "    soma2 = soma(v, u) #usa a função soma para v + u\n",
        "    return np.array_equal(soma1, soma2) #analisa se os resultados são iguais, se sim, true, caso não, false\n",
        "\n",
        "print('--------------------------------------')\n",
        "print('Testando comutatividade:')\n",
        "for i in range(len(v)):\n",
        "  for k in range(len(v) - i - 1):\n",
        "    print(verifica_comutatividade(v[i], v[k+i+1]) , ' => ', v[i], ' , ', v[k+i+1]) # type: ignore\n",
        "\n",
        "                                    #axioma 3\n",
        "def verifica_associatividade(u, v, w):\n",
        "    soma1 = soma(u, soma(v, w)) #Chama a função soma duas vezes. Primeiro somando v + w e na segunda o u + o resultado de v + w\n",
        "    soma2 = soma(soma(u, v), w) #Chama a função soma duas vezes. Primeiro somando u + v e na segunda o resultado de (u + v) + w\n",
        "    return np.array_equal(soma1, soma2) #analisa se os resultados são iguais, se sim, true, caso não, false\n",
        "\n",
        "print('--------------------------------------')\n",
        "print('Testando associatividade:')\n",
        "for i in range(len(v)):\n",
        "  for k in range(len(v) - i - 1):\n",
        "    for l in range(len(v) - i - k - 2):\n",
        "      print(verifica_associatividade(v[i], v[k+i+1], v[k+i+l+2]) , ' => ', v[i], ' , ', v[k+i+1], ' , ', v[k+i+l+2])\n",
        "\n",
        "                                    #axioma 7\n",
        "def verifica_distributividade_1(beta, u, v):\n",
        "    resultado1 = produto(beta, soma(u, v)) #Chama a função produto, passando como paramentro o beta e a função soma, somando u + v\n",
        "    resultado2 = soma(produto(beta, u), produto(beta, v)) #Chama a função soma, passando como paramentro 2x a função produto, multiplicando o mesmo escalar com os vetores u e v, respectivamente\n",
        "    return np.array_equal(resultado1, resultado2) #analisa se os resultados são iguais, se sim, true, caso não, false\n",
        "\n",
        "print('--------------------------------------')\n",
        "print('Testando distributividade 1:')\n",
        "for i in range(len(beta)):\n",
        "  for k in range(len(v)):\n",
        "    for l in range(len(v) - k - 1):\n",
        "      print(verifica_distributividade_1(beta[i], v[k], v[k+l+1]), ' => ', beta[i], ' , ', v[k], ' , ', v[k+l+1])\n",
        "\n",
        "                                    #axioma 8\n",
        "def verifica_distributividade_2(beta, gama, u):\n",
        "    resultado1 = produto(beta + gama, u) #Chama a função produto com os paramentros beta + gama e o vetor u\n",
        "    resultado2 = soma(produto(beta, u), produto(gama, u)) #Chama a função soma com os paramentros sendo 2x a função produto, que é chamada com os paramentros escalar1 e u, escalar2 e u\n",
        "    return np.array_equal(resultado1, resultado2) #analisa se os resultados são iguais, se sim, true, caso não, false\n",
        "\n",
        "print('--------------------------------------')\n",
        "print('Testando distributividade 2:')\n",
        "for i in range(len(beta)):\n",
        "  for k in range(len(beta) - i - 1):\n",
        "    for l in range(len(v)):\n",
        "      print(verifica_distributividade_2(beta[i], beta[i+k+1], v[l]), ' => ', beta[i], ' , ', beta[i+k+1], ' , ', v[l])\n",
        "\n",
        "                                    #axioma 9\n",
        "def verifica_distributividade_3(beta, gama, u):\n",
        "    resultado1 = produto(beta, produto(gama, u)) #chama a função produto com os paramentros escalar1 e a função produto, com os paramentros escalar2 e u\n",
        "    resultado2 = produto(beta * gama, u) #chama a função produto com o paramentro beta*gama e u\n",
        "    return np.array_equal(resultado1, resultado2) #analisa se os resultados são iguais, se sim, true, caso não, false\n",
        "\n",
        "print('--------------------------------------')\n",
        "print('Testando distributividade 3:')\n",
        "for i in range(len(beta)):\n",
        "  for k in range(len(beta) - i - 1):\n",
        "    for l in range(len(v)):\n",
        "      print(verifica_distributividade_3(beta[i], beta[i+k+1], v[l]), ' => ', beta[i], ' , ', beta[i+k+1], ' , ', v[l])\n",
        "\n",
        "                                    #axioma 10\n",
        "def verifica_escalar_unitario(u):\n",
        "    resultado = produto(1, u) #chama a função produto com os paramentros 1 e u\n",
        "    return np.array_equal(resultado, u) #analisa se os resultados são iguais, se sim, true, caso não, false\n",
        "\n",
        "print('--------------------------------------')\n",
        "print('Testando o axioma do escalar unitário:')\n",
        "for i in range(len(v)):\n",
        "      print(verifica_escalar_unitario(v[i]), ' => ', v[i])"
      ],
      "metadata": {
        "id": "UyWufvcABg_Q",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "adb74e15-7630-4fd4-829b-367df61f465b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Testando fechamento da soma:\n",
            "True  =>  [1.+0.j 0.+1.j 1.+0.j]  ,  [4.+0.j 3.+0.j 2.+0.j]\n",
            "True  =>  [1.+0.j 0.+1.j 1.+0.j]  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "True  =>  [1.+0.j 0.+1.j 1.+0.j]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "True  =>  [4.+0.j 3.+0.j 2.+0.j]  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "True  =>  [4.+0.j 3.+0.j 2.+0.j]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "True  =>  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "--------------------------------------\n",
            "Testando fechamento do produto escalar:\n",
            "True  =>  (3+4j)  ,  [1.+0.j 0.+1.j 1.+0.j]\n",
            "True  =>  (3+4j)  ,  [4.+0.j 3.+0.j 2.+0.j]\n",
            "True  =>  (3+4j)  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "True  =>  (3+4j)  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "True  =>  (0.20787957635076193+0j)  ,  [1.+0.j 0.+1.j 1.+0.j]\n",
            "True  =>  (0.20787957635076193+0j)  ,  [4.+0.j 3.+0.j 2.+0.j]\n",
            "True  =>  (0.20787957635076193+0j)  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "True  =>  (0.20787957635076193+0j)  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "True  =>  (-12345+28413j)  ,  [1.+0.j 0.+1.j 1.+0.j]\n",
            "True  =>  (-12345+28413j)  ,  [4.+0.j 3.+0.j 2.+0.j]\n",
            "True  =>  (-12345+28413j)  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "True  =>  (-12345+28413j)  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "--------------------------------------\n",
            "Testando vetor nulo:\n",
            "True  =>  [1.+0.j 0.+1.j 1.+0.j]\n",
            "True  =>  [4.+0.j 3.+0.j 2.+0.j]\n",
            "True  =>  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "True  =>  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "--------------------------------------\n",
            "Testando vetor inverso:\n",
            "True  =>  [1.+0.j 0.+1.j 1.+0.j]\n",
            "True  =>  [4.+0.j 3.+0.j 2.+0.j]\n",
            "True  =>  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "True  =>  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "--------------------------------------\n",
            "Testando comutatividade:\n",
            "True  =>  [1.+0.j 0.+1.j 1.+0.j]  ,  [4.+0.j 3.+0.j 2.+0.j]\n",
            "True  =>  [1.+0.j 0.+1.j 1.+0.j]  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "True  =>  [1.+0.j 0.+1.j 1.+0.j]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "True  =>  [4.+0.j 3.+0.j 2.+0.j]  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "True  =>  [4.+0.j 3.+0.j 2.+0.j]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "True  =>  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "--------------------------------------\n",
            "Testando associatividade:\n",
            "True  =>  [1.+0.j 0.+1.j 1.+0.j]  ,  [4.+0.j 3.+0.j 2.+0.j]  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "True  =>  [1.+0.j 0.+1.j 1.+0.j]  ,  [4.+0.j 3.+0.j 2.+0.j]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "True  =>  [1.+0.j 0.+1.j 1.+0.j]  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "True  =>  [4.+0.j 3.+0.j 2.+0.j]  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "--------------------------------------\n",
            "Testando distributividade 1:\n",
            "True  =>  (3+4j)  ,  [1.+0.j 0.+1.j 1.+0.j]  ,  [4.+0.j 3.+0.j 2.+0.j]\n",
            "True  =>  (3+4j)  ,  [1.+0.j 0.+1.j 1.+0.j]  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "True  =>  (3+4j)  ,  [1.+0.j 0.+1.j 1.+0.j]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "False  =>  (3+4j)  ,  [4.+0.j 3.+0.j 2.+0.j]  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "True  =>  (3+4j)  ,  [4.+0.j 3.+0.j 2.+0.j]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "True  =>  (3+4j)  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "True  =>  (0.20787957635076193+0j)  ,  [1.+0.j 0.+1.j 1.+0.j]  ,  [4.+0.j 3.+0.j 2.+0.j]\n",
            "True  =>  (0.20787957635076193+0j)  ,  [1.+0.j 0.+1.j 1.+0.j]  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "True  =>  (0.20787957635076193+0j)  ,  [1.+0.j 0.+1.j 1.+0.j]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "False  =>  (0.20787957635076193+0j)  ,  [4.+0.j 3.+0.j 2.+0.j]  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "True  =>  (0.20787957635076193+0j)  ,  [4.+0.j 3.+0.j 2.+0.j]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "False  =>  (0.20787957635076193+0j)  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "True  =>  (-12345+28413j)  ,  [1.+0.j 0.+1.j 1.+0.j]  ,  [4.+0.j 3.+0.j 2.+0.j]\n",
            "True  =>  (-12345+28413j)  ,  [1.+0.j 0.+1.j 1.+0.j]  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "False  =>  (-12345+28413j)  ,  [1.+0.j 0.+1.j 1.+0.j]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "True  =>  (-12345+28413j)  ,  [4.+0.j 3.+0.j 2.+0.j]  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "True  =>  (-12345+28413j)  ,  [4.+0.j 3.+0.j 2.+0.j]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "False  =>  (-12345+28413j)  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "--------------------------------------\n",
            "Testando distributividade 2:\n",
            "False  =>  (3+4j)  ,  (0.20787957635076193+0j)  ,  [1.+0.j 0.+1.j 1.+0.j]\n",
            "False  =>  (3+4j)  ,  (0.20787957635076193+0j)  ,  [4.+0.j 3.+0.j 2.+0.j]\n",
            "False  =>  (3+4j)  ,  (0.20787957635076193+0j)  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "False  =>  (3+4j)  ,  (0.20787957635076193+0j)  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "False  =>  (3+4j)  ,  (-12345+28413j)  ,  [1.+0.j 0.+1.j 1.+0.j]\n",
            "False  =>  (3+4j)  ,  (-12345+28413j)  ,  [4.+0.j 3.+0.j 2.+0.j]\n",
            "False  =>  (3+4j)  ,  (-12345+28413j)  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "False  =>  (3+4j)  ,  (-12345+28413j)  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "False  =>  (0.20787957635076193+0j)  ,  (-12345+28413j)  ,  [1.+0.j 0.+1.j 1.+0.j]\n",
            "False  =>  (0.20787957635076193+0j)  ,  (-12345+28413j)  ,  [4.+0.j 3.+0.j 2.+0.j]\n",
            "False  =>  (0.20787957635076193+0j)  ,  (-12345+28413j)  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "False  =>  (0.20787957635076193+0j)  ,  (-12345+28413j)  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "--------------------------------------\n",
            "Testando distributividade 3:\n",
            "True  =>  (3+4j)  ,  (0.20787957635076193+0j)  ,  [1.+0.j 0.+1.j 1.+0.j]\n",
            "True  =>  (3+4j)  ,  (0.20787957635076193+0j)  ,  [4.+0.j 3.+0.j 2.+0.j]\n",
            "False  =>  (3+4j)  ,  (0.20787957635076193+0j)  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "False  =>  (3+4j)  ,  (0.20787957635076193+0j)  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "True  =>  (3+4j)  ,  (-12345+28413j)  ,  [1.+0.j 0.+1.j 1.+0.j]\n",
            "True  =>  (3+4j)  ,  (-12345+28413j)  ,  [4.+0.j 3.+0.j 2.+0.j]\n",
            "True  =>  (3+4j)  ,  (-12345+28413j)  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "False  =>  (3+4j)  ,  (-12345+28413j)  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "False  =>  (0.20787957635076193+0j)  ,  (-12345+28413j)  ,  [1.+0.j 0.+1.j 1.+0.j]\n",
            "False  =>  (0.20787957635076193+0j)  ,  (-12345+28413j)  ,  [4.+0.j 3.+0.j 2.+0.j]\n",
            "False  =>  (0.20787957635076193+0j)  ,  (-12345+28413j)  ,  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "False  =>  (0.20787957635076193+0j)  ,  (-12345+28413j)  ,  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n",
            "--------------------------------------\n",
            "Testando o axioma do escalar unitário:\n",
            "True  =>  [1.+0.j 0.+1.j 1.+0.j]\n",
            "True  =>  [4.+0.j 3.+0.j 2.+0.j]\n",
            "True  =>  [2.        +3.j         1.73205081+3.14159265j 3.        +0.j        ]\n",
            "True  =>  [6.12323400e-17+1.j 1.00000000e+00+0.j 1.35335283e-01+0.j]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<center><h1></h1></center>\n",
        "\n",
        "<center><h1>Questão 2</h1></center>\n",
        "\n",
        "---\n",
        "Implemente uma função que determine se um vetor pode ser escrito como uma combinação linear de um conjunto de vetores.\n",
        "\n",
        "---\n",
        "\n",
        "Um vetor $v$ é dito ser uma combinação linear de um conjunto de vetores $\\{u_1, u_2, u_3, ⋯ , u_n\\}$ se existem escalares $c_1, c_2, c_3, ⋯ , c_n$ tais que:\n",
        "\n",
        "$$v = c_1*u_1 + c_2*u_2 + c_3*u_3 + … + c_n*u_n$$\n",
        "\n",
        "\n",
        "\n",
        "*   $v$ é o vetor que queremos expressar como uma combinação linear.\n",
        "*   $u_1, u_2, ..., u_n$ são os vetores do conjunto.\n",
        "*   $c_1, c_2, ..., c_n$ são so escalares, coeficientes, que determinam a combinação linear.\n",
        "---\n",
        "\n",
        "<h1>$Não \\space deve \\space ser \\space ultilizado \\space np.linalg.solve()$"
      ],
      "metadata": {
        "id": "Jw0YZFUdTZLI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "def gauss(A, B):\n",
        "\n",
        "    n = len(A)\n",
        "    A = np.array(A, dtype=np.float64)\n",
        "    B = np.array(B, dtype=np.float64)\n",
        "\n",
        "    A = np.hstack([A, B.reshape(-1, 1)])\n",
        "\n",
        "    for i in range(n):\n",
        "        p = np.argmax(np.abs(A[i:, i])) + i\n",
        "        if A[p, i] == 0:\n",
        "            raise Exception(\"Sistema singular ou indefinido.\")\n",
        "\n",
        "        if p != i:\n",
        "            A[[i, p]] = A[[p, i]]\n",
        "\n",
        "        for j in range(i + 1, n):\n",
        "            factor = A[j, i] / A[i, i]\n",
        "            A[j, i:] -= factor * A[i, i:]\n",
        "\n",
        "    # Substituição Reversa\n",
        "    X = np.zeros(n)\n",
        "    for i in range(n - 1, -1, -1):\n",
        "        X[i] = (A[i, -1] - np.sum(A[i, i + 1:n] * X[i + 1:])) / A[i, i]\n",
        "\n",
        "    return X\n",
        "\n",
        "def combinacao(vetores, vetor_alvo):\n",
        "\n",
        "    n = len(vetor_alvo)  # Tamanho do vetor alvo\n",
        "    A = np.array(vetores)  # Matriz composta pelos vetores fornecidos\n",
        "    B = np.array(vetor_alvo)  # Vetor alvo\n",
        "   # A função vai tentar resolver a eliminação gaussiana e se conseguir alguma solução, vai determinar que é combinação linear e printar os coeficientes que formam um vetor solução.\n",
        "\n",
        "    try:\n",
        "        # Tentar resolver o sistema usando a função gauss\n",
        "        coef = gauss(A, B)\n",
        "        resultado = True  # Se conseguiu resolver, é combinação linear\n",
        "    except Exception as e:\n",
        "        # Se deu erro na função gauss, não é combinação linear\n",
        "        resultado = False\n",
        "        coef = None\n",
        "\n",
        "    return resultado, coef\n",
        "\n",
        "\n",
        "print('Caso 1')\n",
        "vetores = np.array([[0,0,1],[0,1,0],[1,0,0]])\n",
        "vetor_alvo = np.array([1,2,3])\n",
        "\n",
        "resultado, coef = combinacao(vetores, vetor_alvo)\n",
        "\n",
        "if resultado:\n",
        "    print(coef)\n",
        "else:\n",
        "    print(\"Não é combinação linear\")\n",
        "\n",
        "print('Caso 2')\n",
        "vetores = np.array([[3.5, 2.1, 2, 4], [5.25, 3.15, 3.0, 6.0], [4.2, 2.52, 2.4, 4.8], [-4.9, -2.94, -2.8, -5.6]])\n",
        "vetor_alvo = np.array([1,2,3,4])\n",
        "\n",
        "resultado, coef = combinacao(vetores, vetor_alvo)\n",
        "\n",
        "if resultado:\n",
        "    print(coef)\n",
        "else:\n",
        "    print(\"Não é combinação linear\")\n",
        "\n",
        "print('Caso 3')\n",
        "vetores = np.array([[np.exp(3), np.exp(-2), np.exp(-4), np.sin(np.pi/2), np.cos(np.pi/6), 0], [5.43, 13, 2.5, 1, 1, 2], [8.145, 19.5, 3.75, 1.5, 1.5, 3.], [1, 4, 7.8, np.tan(np.pi/6), np.tanh(1), 3], [1, 4, 7.8, np.tan(np.pi/6), np.tanh(1), 3]])\n",
        "vetor_alvo = np.array([1,2,3,4,5,6])\n",
        "\n",
        "resultado, coef = combinacao(vetores, vetor_alvo)\n",
        "\n",
        "if resultado:\n",
        "    print(coef)\n",
        "else:\n",
        "    print(\"Não é combinação linear\")"
      ],
      "metadata": {
        "id": "iAflG5y4TgUG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d8b952dc-1971-4af4-872b-a2bf1deac8f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Caso 1\n",
            "[3. 2. 1.]\n",
            "Caso 2\n",
            "Não é combinação linear\n",
            "Caso 3\n",
            "Não é combinação linear\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<center><h1></h1></center>\n",
        "\n",
        "<center><h1>Questão 3</h1></center>\n",
        "\n",
        "---\n",
        "\n",
        "Quando um condutor é percorrido por uma corrente elétrica de intensidade $i$ e está imerso em um campo magnético $B$, uma força magnética $F_m$, conhecida como força de Lorentz, atuará sobre este condutor. Esta força magnética, ou força de interação magnética, surge devido ao movimento dos portadores de carga, elétrons, no condutor, pois o campo magnético não atua em cargas em repouso.\n",
        "\n",
        "Considerando que um pedaço de fio reto de comprimento $L$ imerso num campo magnético uniforme $B$ e conduzindo uma corrente $i$ teremos que a força de Lorentz dado por:\n",
        "\n",
        "$$F_m = i*L*B$$\n",
        "\n",
        "onde:\n",
        "* $F_m$ é a força de Lorentz\n",
        "* $i$ é a corrente elétrica (A)\n",
        "* $L$ é o comprimento do condutor (m)\n",
        "* $B$ é o campo magnético\n",
        "\n",
        "Um experimento ultilizando espirais de material condutor com comprimentos variados onde serão inseridos em um campo magnético uniforme de um imã permanente: $L_1 = 12.5mm$, $L_2 = 25mm$, $L_3 = 50mm$, $L_4 = 100mm$\n",
        "\n",
        "---\n",
        "\n",
        "## Foram realizados 10 experimentos, sendo mensurados os seguintes dados de corrente e forças, para cada comprimento do condutor:\n",
        "* $i = [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5]$\n",
        "* $F_{L_1} = [31.5, 31.55, 31.63, 31.7, 31.74, 31.82, 31.9, 31.94, 32, 32.04]$\n",
        "* $F_{L_2} = [30.65, 30.8, 30.92, 31.03, 31.15, 31.25, 31.36, 31.5, 31.63, 31.73]$\n",
        "* $F_{L_3} = [37.86, 38.1, 38.31, 38.53, 38.72, 38.94, 39.15, 39.4, 39.62, 39.71]$\n",
        "* $F_{L_4} = [40.31, 40.75, 41.15, 41.5, 41.97, 42.42, 42.83, 43.22, 43.64, 44.04]$"
      ],
      "metadata": {
        "id": "XrLKHmQCeSmZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Tratamento linear da base:\n",
        "Para que os gráficos possam ser comparáveis a retas passando pela origem (linear, ao invés de afim), a seguinte equação de ajuste deve ser aplicada. Ela faz com que as séries de dados de forças iniciem em 0 e em seguida converte de gramas (pela forma que foi medido) para $mN$ considerando a aceleração da gravidade como $9,8m/s^2$\n",
        "\n",
        "$$F_{L_k}|_{k=1}^4 = (F_{L_k} - F_{L_k}[0])*9,8$$"
      ],
      "metadata": {
        "id": "PT0xh8U51AsY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Problema\n",
        "\n",
        "Usando os dados fornecidos de corrente ($i$) e força em função da corrente para cada comprimento de espiral, ajuste os gráficos e calcule o valor aproximado de $B$ em $mN/(A*mm)$ para cada espiral\n",
        "\n",
        "## *Deve ser mantido o formalismo das demais questões*\n",
        "\n",
        "DICA: Resolva usando curve fitting. Veja que o sistema criado $(i*L_k)*B = F_{L_k}$ vai ter mais equações do que incógnitas e não é consistente, de forma que não será possível fazer $B = (i*L_k)^{-1} * F_{L_k}$ pois não é possível encontrar uma reta que passe por todos os pontos. Apesar disso, podemos usar a [pseudo-inversa de Moore Penrose](https://pt.wikipedia.org/wiki/Inversa_de_Moore-Penrose)."
      ],
      "metadata": {
        "id": "agZ5jaAS1G_X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from matplotlib import pyplot as plt\n",
        "\n",
        "# Função de ajuste (hipotética, precisa ser confirmada)\n",
        "def fit_f(i, B, L):\n",
        "    return i * L * B\n",
        "\n",
        "# Aquisição dos dados\n",
        "i = np.array([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5])\n",
        "L_1 = 0.0125\n",
        "L_2 = 0.025\n",
        "L_3 = 0.05\n",
        "L_4 = 0.1\n",
        "f_l1 = np.array([31.5, 31.55, 31.63, 31.7, 31.74, 31.82, 31.9, 31.94, 32, 32.04])\n",
        "f_l2 = np.array([30.65, 30.8, 30.92, 31.03, 31.15, 31.25, 31.36, 31.5, 31.63, 31.73])\n",
        "f_l3 = np.array([37.86, 38.1, 38.31, 38.53, 38.72, 38.94, 39.15, 39.4, 39.62, 39.71])\n",
        "f_l4 = np.array([40.31, 40.75, 41.15, 41.5, 41.97, 42.42, 42.83, 43.22, 43.64, 44.04])\n",
        "\n",
        "# Plotando os gráficos\n",
        "plt.scatter(i, f_l1, c='r', label=\"L_1\")\n",
        "plt.scatter(i, f_l2, c='g', label=\"L_2\")\n",
        "plt.scatter(i, f_l3, c='b', label=\"L_3\")\n",
        "plt.scatter(i, f_l4, c='k', label=\"L_4\")\n",
        "plt.legend(loc=\"upper left\")\n",
        "plt.xlabel(\"Corrente\")\n",
        "plt.ylabel(\"Força magnética\")\n",
        "plt.show()\n",
        "\n",
        "# Tratamento dos dados\n",
        "#Aplicando a fórmula\n",
        "f_l1_novo = (f_l1 - f_l1[0]) * 9.8\n",
        "f_l2_novo = (f_l2 - f_l2[0]) * 9.8\n",
        "f_l3_novo = (f_l3 - f_l3[0]) * 9.8\n",
        "f_l4_novo = (f_l4 - f_l4[0]) * 9.8\n",
        "\n",
        "# Plotando os gráficos tratados\n",
        "plt.scatter(i, f_l1_novo, c='r', label=\"L_1\")\n",
        "plt.scatter(i, f_l2_novo, c='g', label=\"L_2\")\n",
        "plt.scatter(i, f_l3_novo, c='b', label=\"L_3\")\n",
        "plt.scatter(i, f_l4_novo, c='k', label=\"L_4\")\n",
        "plt.legend(loc=\"upper left\")\n",
        "plt.xlabel(\"Corrente\")\n",
        "plt.ylabel(\"Força magnética (tratada)\")\n",
        "plt.show()\n",
        "\n",
        "# Função de ajuste\n",
        "def fit_f(i, B, L):\n",
        "    return i * L * B\n",
        "\n",
        "# Função de mínimos quadrados para encontrar B\n",
        "def ajuste_minimos_quadrados(i, f_obs, L):\n",
        "    B = np.sum(i * f_obs) / np.sum(i**2 * L) # Calculando B pela fórmula dos mínimos quadrados\n",
        "    return B\n",
        "\n",
        "# Aplicando ajuste dos mínimos quadrados\n",
        "B_1 = ajuste_minimos_quadrados(i, f_l1_novo, L_1)\n",
        "B_2 = ajuste_minimos_quadrados(i, f_l2_novo, L_2)\n",
        "B_3 = ajuste_minimos_quadrados(i, f_l3_novo, L_3)\n",
        "B_4 = ajuste_minimos_quadrados(i, f_l4_novo, L_4)\n",
        "\n",
        "# Plotando os gráficos com os valores observados e ajustados\n",
        "plt.scatter(i, f_l1_novo, c='r', label=\"L_1 obs\")\n",
        "plt.plot(i, fit_f(i, B_1, L_1), c='r', label=\"L_1 pred\")\n",
        "plt.scatter(i, f_l2_novo, c='g', label=\"L_2 obs\")\n",
        "plt.plot(i, fit_f(i, B_2, L_2), c='g', label=\"L_2 pred\")\n",
        "plt.scatter(i, f_l3_novo, c='b', label=\"L_3 obs\")\n",
        "plt.plot(i, fit_f(i, B_3, L_3), c='b', label=\"L_3 pred\")\n",
        "plt.scatter(i, f_l4_novo, c='k', label=\"L_4 obs\")\n",
        "plt.plot(i, fit_f(i, B_4, L_4), c='k', label=\"L_4 pred\")\n",
        "\n",
        "plt.legend(loc=\"upper left\")\n",
        "plt.xlabel(\"Corrente\")\n",
        "plt.ylabel(\"Força magnética (tratada)\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ly-IMjxMSFoU",
        "outputId": "3bdabf27-073a-41ed-be3d-59e3ce6e24b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<center><h1></h1></center>\n",
        "\n",
        "<center><h1>Algebra Aplicada - Manipulação de Áudio</h1></center>\n",
        "<br>\n",
        "\n",
        "---\n",
        "\n",
        "Considere 2 arquivos de audio no formato WAV, por exemplo: `audio1.wav` e `audio2.wav`. Considere que cada áudio pode ser visto como um vetor em um espaço vetorial de senoides, onde cada componente do áudio é uma coordenada do vetor, siga os passos a seguir:\n",
        "\n",
        "*   `A leitura do arquivo WAV considera cada posição do vetor como o valor do pico da onda sonora`;\n",
        "*   Gerar combinações lineares dos vetores das amostras dos audios;\n",
        "*   Exporte o resultado final como um arquivo WAV chamado resultado.wav\n",
        "\n",
        "---\n",
        "\n",
        "Fique avontade para manipular os arquivo e assim validar as observações. Ademais, responda:\n",
        "\n",
        "\n",
        "<center>\n",
        "1.   Qual o resultado de somar os 2 vetores?<br>\n",
        "R: Se você somar os dois vetores de áudio, o resultado será uma sobreposição dos dois áudios. Se as frequências e amplitudes dos áudios forem próximas, você poderá notar um aumento da intensidade sonora.\n",
        "<br>\n",
        "2.   Qual o resultado de multiplicação por escalar? <br>\n",
        "R: Multiplicar o vetor de áudio por um escalar amplifica ou reduz o volume. Um valor maior que 1 amplifica o som, e um valor menor que 1 reduz o volume.\n",
        "<br>\n",
        "3.   O vetor nulo representa o que? <br>\n",
        "R: O vetor nulo representa o silêncio absoluto no contexto de áudio.\n",
        "\n",
        "4.   Adicionando para um som o som correspondente ao seu vetor inverso, cosidere como inversão de fase, devemos obter qual resultado?<br>\n",
        "R: Somar um áudio com seu inverso de fase resulta em cancelamento total, ou seja, silêncio (vetor nulo).\n",
        "\n",
        "</center>\n",
        "\n"
      ],
      "metadata": {
        "id": "h7kF5XRSApgA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import scipy.io.wavfile as wav\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Função para leitura dos arquivos WAV\n",
        "def read(file):\n",
        "    sample_rate, data = wav.read(file)\n",
        "    if len(data.shape) == 2:  # Verifica se tem 2 canais\n",
        "      data = np.mean(data, axis=1)\n",
        "    return sample_rate, data\n",
        "\n",
        "# Leitura dos arquivos de áudio\n",
        "rate1, audio1 = read(\"audio1.wav\")\n",
        "rate2, audio2 = read(\"audio2.wav\")\n",
        "min_len = min(audio1.shape[0], audio2.shape[0])\n",
        "\n",
        "audio1 = audio1[:min_len]\n",
        "audio2 = audio2[:min_len]\n",
        "\n",
        "time1 = np.linspace(0., len(audio1) / rate1, len(audio1))\n",
        "time2 = np.linspace(0., len(audio2) / rate2, len(audio2))\n",
        "\n",
        "# Definindo os coeficientes da combinação linear\n",
        "a = 0.7  # Exemplo de coeficiente para o áudio 1\n",
        "b = 0.3  # Exemplo de coeficiente para o áudio 2\n",
        "\n",
        "# Fazendo a combinação linear\n",
        "result = a * audio1 + b * audio2\n",
        "\n",
        "# Normalizando para evitar distorção\n",
        "result = result / np.max(np.abs(result))  # Normalizar entre -1 e 1\n",
        "result = np.int16(result * 32767)  # Converter para int16\n",
        "\n",
        "result_time = np.linspace(0., len(result) / rate1, len(result))\n",
        "\n",
        "# Plot do audio1\n",
        "plt.subplot(3, 1, 1)\n",
        "plt.plot(time1, audio1, label=\"Áudio 1\")\n",
        "plt.xlabel(\"Tempo [s]\")\n",
        "plt.ylabel(\"Amplitude\")\n",
        "plt.legend()\n",
        "\n",
        "# Plot do audio 2\n",
        "plt.subplot(3, 1, 2)\n",
        "plt.plot(time2, audio2, label=\"Áudio 2\")\n",
        "plt.xlabel(\"Tempo [s]\")\n",
        "plt.ylabel(\"Amplitude\")\n",
        "plt.legend()\n",
        "\n",
        "# Plot do result\n",
        "plt.subplot(3, 1, 3)\n",
        "plt.plot(result_time, result, label=\"Resultado\")\n",
        "plt.xlabel(\"Tempo [s]\")\n",
        "plt.ylabel(\"Amplitude\")\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "# Salvando o arquivo resultante\n",
        "wav.write(\"resultado.wav\", rate1, result)\n",
        "print(f'coeficiente 1: {a}, coeficiente 2: {b}')"
      ],
      "metadata": {
        "id": "BpGqjyp_cbBJ",
        "outputId": "bba8703c-1de4-4f2b-db73-c4d938f73eae",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 536
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-53-0d5776180019>:7: WavFileWarning: Reached EOF prematurely; finished at 5758639 bytes, expected 4294967303 bytes from header.\n",
            "  sample_rate, data = wav.read(file)\n",
            "<ipython-input-53-0d5776180019>:7: WavFileWarning: Reached EOF prematurely; finished at 5760079 bytes, expected 4294967303 bytes from header.\n",
            "  sample_rate, data = wav.read(file)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "coeficiente 1: 0.7, coeficiente 2: 0.3\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}